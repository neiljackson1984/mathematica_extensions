(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



LengthConversionData = (* Each element of this list is of the form {names,standardunitpernamedunit}, where names is a list of strings, each string being an allowable name for that unit.  the standard unit here is the printer's point, as you can see from the first entry.*)
{
{{"printer's point","printer's points","pt","pts"},1},
{{"inch","inches","in"},72},
{{"centimeter","cm"},72/2.54},
{{"millimeter","mm"},72/25.4}
};


SetAttributes[ConvertLength,Listable];
ConvertLength[number_?NumericQ,sourceunitname_String,targetunitname_String] :=
Block[
{i,StandardUnitsPerSourceUnit = Null, StandardUnitsPerTargetUnit = Null},

(*this For loop looks at LengthConversionData and looks up the proper values for StandardUnitsPerSourceUnit and StandardUnitsPerTargetUnit, based on the strings given as arguments*)
For[
i=1,
i<= Length [LengthConversionData] 
&&  (StandardUnitsPerSourceUnit == Null  || StandardUnitsPerTargetUnit == Null),
i++,
If[
Count[LengthConversionData[[i]],sourceunitname,2] >= 1,
StandardUnitsPerSourceUnit = LengthConversionData[[i,2]]
];
If[
Count[LengthConversionData[[i]],targetunitname,2] >= 1,
StandardUnitsPerTargetUnit = LengthConversionData[[i,2]]
];
];

If[
StandardUnitsPerSourceUnit == Null  || StandardUnitsPerTargetUnit == Null,
Print["error while converting length units: could not recognize the units"]
];

Return[number *  StandardUnitsPerSourceUnit/StandardUnitsPerTargetUnit];

];
SetAttributes[ExportSizedDrawing,HoldFirst];
ExportSizedDrawing[
drawing_, (*a list of graphics primitives,  (or possibly a Graphics[] object, from which we can extract the list of graphics primitves*)
canonicalregion_,(*  the {{Xmin,Xmax},{Ymin,Ymax}} of the canonical region to be printed into the pdf*)
physicalsize_ ,(* the {Xextent, Yextent} of the pdf page, in the units given by the string in the next argument, onto which the region specified by canonicalregion is to be stretched*)
unitsofphysicalregion_ ,(*a string containing a units key word such as "inch" "mm" "meter" etc*)
filename_:Null
] :=
Block[
{urlofdrawing,urlofviewer,commandstring},

(*ATTEMPTING TO EXTRACT graphics primitives from drawing.  Can't make it work easily.  For  now, drawing must be a list of graphics primitves


drawing = Replace[
drawing,
x_Graphics[
args___
] :> DeleteCases[{args},Rule]
];

drawing = DeleteCases[
drawing,
Rule[___]
];

Return[InputForm[drawing]];

(*drawing = DeleteCases[
drawing,
{
Rule[ImagePadding,_] ,
Rule[ImageMargins,_] ,
Rule[PlotRange,_]
},
Infinity
];
*)
*)

(* PUT THIS IN  A SEPARATE FUNCTION; IT CAN GET ANNOYING TO ALWAYS RUN
(*this closes acrobat reader, if its open, so that the file can be written*)
commandstring = "taskkill /FI \"WINDOWTITLE eq drawing.pdf - Adobe Acrobat Professional\"";

Print[commandstring];
Run["taskkill /FI \"WINDOWTITLE eq drawing.pdf - Adobe Acrobat Professional\""];
(*this pause is necessary in order to wait for taskkill to complete*)Pause[0.3];
*)


urlofdrawingfile = NotebookDirectory[] 
<>  If[
StringQ[filename], 
 filename,
 ToString[HoldForm[drawing]]
] 
<> ".pdf";

Export[
urlofdrawingfile,
Graphics[
drawing,
ImageMargins -> 0,
ImagePadding -> 0,
PlotRange -> canonicalregion,
AspectRatio -> physicalsize[[2]]/physicalsize[[1]] (*The AspectRatio option for Graphics specifies the ratio of height to width of the output graphic.*)
],
ImageSize ->
 ConvertLength[
physicalsize[[1]],
unitsofphysicalregion, "printer's points"  
]
];


(*The Export function will generate an image with the size specified by ImageSize, but it will not change the aspect ratio of the graphic.  Rather, it scales the graphic by the same factor in x and in y to get it to be as big as possible within the ImageSize area.  In other words, white bars might be left on the sides if the aspect ratio of ImageSize is not the same as the aspect ratio of the graphic.  Thus, even though Export will accept an ImageSize option value that is a pair of numbers (width and height), I am going to just give it a single number, which it will use as width, with the hiehgt being automatically determined by the aspect ratio of the graphic.*)

(*
urlofviewer = "C:\\Program Files\\Adobe\\Acrobat 8.0\\Acrobat\\Acrobat.exe";

commandstring = "start \"" <>   urlofviewer <>  "\" \"" <> urlofdrawingfile <> "\"";

(*this opens the image for viewing*)
Print[commandstring];

Run[commandstring];
*)
];





(*ExportSizedDrawing2 works exactly like ExportSizedDrawing cexcept you can specify the entire output file url, includingn extension, in the argument, instaead of just the filenamew*)
SetAttributes[ExportSizedDrawing2,HoldFirst];
ExportSizedDrawing2[
drawing_, (*a list of graphics primitives,  (or possibly a Graphics[] object, from which we can extract the list of graphics primitves*)
canonicalregion_,(*  the {{Xmin,Xmax},{Ymin,Ymax}} of the canonical region to be printed into the pdf*)
physicalsize_ ,(* the {Xextent, Yextent} of the pdf page, in the units given by the string in the next argument, onto which the region specified by canonicalregion is to be stretched*)
unitsofphysicalregion_ ,(*a string containing a units key word such as "inch" "mm" "meter" etc*)
filename_:Null
] :=
Block[
{urlofdrawing,urlofviewer,commandstring},

(*ATTEMPTING TO EXTRACT graphics primitives from drawing.  Can't make it work easily.  For  now, drawing must be a list of graphics primitves


drawing = Replace[
drawing,
x_Graphics[
args___
] :> DeleteCases[{args},Rule]
];

drawing = DeleteCases[
drawing,
Rule[___]
];

Return[InputForm[drawing]];

(*drawing = DeleteCases[
drawing,
{
Rule[ImagePadding,_] ,
Rule[ImageMargins,_] ,
Rule[PlotRange,_]
},
Infinity
];
*)
*)

(* PUT THIS IN  A SEPARATE FUNCTION; IT CAN GET ANNOYING TO ALWAYS RUN
(*this closes acrobat reader, if its open, so that the file can be written*)
commandstring = "taskkill /FI \"WINDOWTITLE eq drawing.pdf - Adobe Acrobat Professional\"";

Print[commandstring];
Run["taskkill /FI \"WINDOWTITLE eq drawing.pdf - Adobe Acrobat Professional\""];
(*this pause is necessary in order to wait for taskkill to complete*)Pause[0.3];
*)


urlofdrawingfile = NotebookDirectory[] 
<>  If[
StringQ[filename], 
 filename,
 ToString[HoldForm[drawing]]
] 
<> ".pdf";

Export[
filename,
Graphics[
drawing,
ImageMargins -> 0,
ImagePadding -> 0,
PlotRange -> canonicalregion,
AspectRatio -> physicalsize[[2]]/physicalsize[[1]] (*The AspectRatio option for Graphics specifies the ratio of height to width of the output graphic.*)
],
ImageSize ->
 ConvertLength[
physicalsize[[1]],
unitsofphysicalregion, "printer's points"  
]
];


(*The Export function will generate an image with the size specified by ImageSize, but it will not change the aspect ratio of the graphic.  Rather, it scales the graphic by the same factor in x and in y to get it to be as big as possible within the ImageSize area.  In other words, white bars might be left on the sides if the aspect ratio of ImageSize is not the same as the aspect ratio of the graphic.  Thus, even though Export will accept an ImageSize option value that is a pair of numbers (width and height), I am going to just give it a single number, which it will use as width, with the hiehgt being automatically determined by the aspect ratio of the graphic.*)

(*
urlofviewer = "C:\\Program Files\\Adobe\\Acrobat 8.0\\Acrobat\\Acrobat.exe";

commandstring = "start \"" <>   urlofviewer <>  "\" \"" <> urlofdrawingfile <> "\"";

(*this opens the image for viewing*)
Print[commandstring];

Run[commandstring];
*)
];
