(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



namedpartlookuptable :=
{
{
"record",
{
"record ID",
"VUID",
"component type",
"manufacturer",
"manufacturer part number",
"bar code scanner output for part number",
"face text",
"form factor (imperial basis)",
"capacitance (farads)",
"tolerance class (percent)",
"has pre-existing label",
"Apex Micro Bin number",
"miscellaneous",
"vetco unified part number",
"extracted part number",
"part number form",
"error code from part number matching process"
}
},


(*this whole thing is called a type entry:*)
{
(*type name: *) "vertexdatum", 
(*prototype structure: *) {  
"rightray",
"leftray",
"vertexangle",
"leftincomingsidepoint",
"rightincomingsidepoint",
"leftoutgoingsidepoint",
"rightoutgoingsidepoint"
} 
},

(*this whole thing is called a type entry:*)
{
(*type name: *) "ray", 
(*prototype structure: *) {  
"startpoint",
"targetpoint",
"angle"
} 
},

(*this whole thing is called a type entry:*)
{
(*type name: *) "logentry", 
(*prototype structure: *)
{
"time",
"eventlist"
}
},

(*this whole thing is called a type entry:*)
{
(*type name: *) "time", 
(*prototype structure: *)
{
"year",
"month",
"date",
"hour",
"minute"
}
},

(*this whole thing is called a type entry:*)
{
(*type name: *) "event", 
(*prototype structure: *)
{
"time",
"name",
"numericvalue"
}
}
}

(*this causes all the strings that are type names or address names to be recognized by the mathematica front end as known names, and not highlight them in blue*)
Table[
Options[Symbol[i]] = {};,
{i,Cases[namedpartlookuptable,_String,Infinity]}
];

(*given a part name and type (either as strings or just pure expressions), this returns the address within the object that that part weill be found at.*)
SetAttributes[namedaddress,HoldAll];
namedaddress[partname_,type_] :=
  Cases[
namedpartlookuptable, 
typeentry_?(First[#] == ToString@ Unevaluated@ type& )  :>  
 Position[typeentry[[2]],ToString@ Unevaluated@ partname]
][[1]]// If[
Length[#] == 0, 
Message[namedaddress::error,ToString@ Unevaluated@  type ,ToString@ Unevaluated@ partname ]; Abort[];,
Return[#[[1]]]
]&;
namedaddress::error := "error resolving named part address for object type `1` and part name `2`.";


Attributes[namedobject] = {};
Remove[namedobject];
Options[namedobject] = {}; (*For some reason, this line causes the front end to recognize "namedobject" as a known name, not to be hiughlighted in blue like un assigned variable names.*)
Attributes[namedobject] = {Protected}; (*this prevents anything from being assigned to the symbol name "namedobject"*)

SetAttributes[newnamedobject,HoldAll];
newnamedobject[type_ ] := 
namedobject[
ToString@ Unevaluated@type, 
Cases[
namedpartlookuptable, 
typeentry_?(First[#] == ToString@ Unevaluated@type& )  :>  typeentry[[2]]
][[1]]
];

Attributes[namedpart] = {};
Remove[namedpart];
SetAttributes[namedpart,HoldAll];
namedpart[x_,partname_, newvalue_:Null, equalsstring_:"="] := (*this needs to be modified so that partname can reference nested namedobjects*)
Block[
{partnameslist,absoluteaddress,i},
(*absoluteaddress is the absolute address within x to the desired part.*)
(*the argument partname can be a string, a symbol, or a list, each of whose elements is a string or symbol.  it can even be of the form symbol1.symbol2.symbol3...  Also, the strings within partname are expanded so that "address1.address2" -> {"address1", "address2"}*)
(*Return@ToString@Unevaluated@partname;*)
partnameslist = Replace[
Unevaluated[{partname}],
y_?AtomQ :> ToString@Unevaluated@y,
Infinity
];

partnameslist = Replace[
partnameslist,
y_String :> StringSplit[y,"."],
Infinity
];

partnameslist =
Cases[
partnameslist, (*this argument of Cases[] has to be enclosed in braces because, for instance, Cases[5,_Integer] = {}, whereas Cases[{5},_Integer] = {5} *)
_String,
Infinity
]; (*partnameslist is now a list of strings of part names*)


For[
i=1; absoluteaddress = {};,
i<= Length[partnameslist],
i++,
absoluteaddress = 
Join[
absoluteaddress,
{2},
namedaddress[
Evaluate[partnameslist[[i]]], 
Evaluate[Part @@  Join[{Evaluate[x]} ,absoluteaddress , {1}]]
]
];
];

(*at this point, absoluteaddress is the address (a list of integers) of the desired element within x *)



If[
MatchQ[newvalue,Null],
Return[Part @@  {x}  ~Join~ absoluteaddress],
ToExpression@StringJoin@ Flatten@  (*There is probably a better way to do this than by converting the command into a string, but I can't figure out the order of evaluation.*)
{
"Part[",
ToString@Unevaluated@x,
Table[
", " <> ToString[i] ,
{i,absoluteaddress}
],
"] ",
equalsstring,
" ",
ToString@Unevaluated@newvalue
};
Return[x];
];
];

(*this lets us use the syntax namedpart[x,partname] = newvalue (or :=) to alter the definition of x.  *)
UpValues[namedpart] = 
{
HoldPattern[Set[namedpart[x_, partname_],y_] ] :> namedpart[x,partname,y],
HoldPattern[SetDelayed[namedpart[x_, partname_],y_] ] :> namedpart[x,partname,y, ":="]
}; 
SetAttributes[namedpart, Protected] ;




